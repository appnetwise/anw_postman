{
	"info": {
		"_postman_id": "8e7da8bc-6f85-4874-9e52-90679a7a0eb8",
		"name": "Voltacabs - Demand Hotspots API",
		"description": "API for generating demand hotspots",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21518977",
		"_collection_link": "https://orange-satellite-583766.postman.co/workspace/427c0b8b-401a-49e2-90d2-b88d850d9482/collection/21518977-8e7da8bc-6f85-4874-9e52-90679a7a0eb8?action=share&source=collection_link&creator=21518977"
	},
	"item": [
		{
			"name": "api/v1",
			"item": [
				{
					"name": "driver users",
					"item": [
						{
							"name": "Create Driver User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generate Random Name\r",
											"function generateRandomName() {\r",
											"    var characters = 'abcdefghijklmnopqrstuvwxyz';\r",
											"    var firstname = 'user';\r",
											"    var lastname = 'Random_';\r",
											"    for (var i = 0; i < 6; i++) { \r",
											"        lastname += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return firstname + lastname;\r",
											"}\r",
											"\r",
											"//Generate Random Email\r",
											"function generateRandomEmail(randomName) {\r",
											"    var characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    var domain = 'gmail.com';\r",
											"    var randomString = '';\r",
											"    for (var i = 0; i < 5; i++) { \r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    var email = randomName.toLowerCase() +  '@' + domain;\r",
											"    return email;\r",
											"}\r",
											"\r",
											"\r",
											"// Generate random name\r",
											"var randomName = generateRandomName();\r",
											"pm.environment.set(\"randomName\", randomName);\r",
											"\r",
											"// Generate random email using the random name\r",
											"var randomEmail = generateRandomEmail(randomName);\r",
											"pm.environment.set(\"randomEmail\", randomEmail);\r",
											"\r",
											"//Generate Random Phone Number\r",
											"function generateRandomPhone() {\r",
											"  var phoneNumber = '';\r",
											"    for (var i = 0; i < 10; i++) {\r",
											"        if (i === 3 || i === 7) {\r",
											"            phoneNumber += '-';\r",
											"        } else {\r",
											"            phoneNumber += Math.floor(Math.random() * 10);\r",
											"        }\r",
											"    }\r",
											"    return phoneNumber;\r",
											"}\r",
											"\r",
											"var randomPhone = generateRandomPhone();\r",
											"pm.environment.set(\"randomPhone\", randomPhone);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();\r",
											"var UserID = responseBody.UserID;\r",
											"pm.environment.set('driverID', UserID)\r",
											"\r",
											"pm.test(\"Response time is within acceptable limits\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200); \r",
											"});\r",
											"\r",
											"pm.test('Response Body Data Validation', function () {\r",
											"    var responseBody = pm.response.json();\r",
											"    pm.expect(responseBody).to.be.an('object');\r",
											"    pm.expect(responseBody).to.have.property('Name');\r",
											"    pm.expect(responseBody).to.have.property('Email');\r",
											"    pm.expect(responseBody).to.have.property('Phone');\r",
											"    pm.expect(responseBody).to.have.property('UserType');\r",
											"    pm.expect(responseBody).to.not.have.property('UserType01');\r",
											"    pm.expect(responseBody).to.have.property('UserID');\r",
											"    pm.expect(responseBody).to.have.property('CreatedAt');\r",
											"    pm.expect(responseBody).to.have.property('UpdatedAt');\r",
											"})\r",
											"\r",
											"\r",
											"pm.test(\"headers to have content-type\", function () {\r",
											"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response size is within acceptable limits\", function () {\r",
											"    var responseSize = pm.response.responseSize;\r",
											"    pm.expect(responseSize).to.be.below(1024);\r",
											"});\r",
											"\r",
											"pm.test('Schema is valid', function () {\r",
											"    let schema = {\r",
											"        'type': 'object',\r",
											"        'properties': {\r",
											"            'Name': { 'type': 'string' },\r",
											"            'Email': { 'type': 'string' },\r",
											"            'Phone': { 'type': 'string' },\r",
											"            'UserType': { 'type': 'string' },\r",
											"            'UserID': {\r",
											"                'type': [\r",
											"                    'string',\r",
											"                    'integer'\r",
											"                ]\r",
											"            },\r",
											"            'CreatedAt': { 'type': 'string' },\r",
											"            'UpdatedAt': { 'type': 'string' }\r",
											"        },\r",
											"        'required': [\r",
											"            'Name',\r",
											"            'Email',\r",
											"            'Phone',\r",
											"            'UserType',\r",
											"            'UserID',\r",
											"            'CreatedAt',\r",
											"            'UpdatedAt'\r",
											"        ],\r",
											"        'additionalProperties': false\r",
											"    };\r",
											"    pm.response.to.have.jsonSchema(schema);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\n{\n  \"Name\": \"{{randomName}}\",\n  \"Email\": \"{{randomEmail}}\",\n  \"Phone\": \"{{randomPhone}}\",\n  \"UserType\": \"Driver\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/users/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										""
									]
								},
								"description": "### Add User\n\nThis endpoint allows you to add a new user to the system.\n\n#### Request Body\n\n- `Name` (string, required): The name of the user.\n- `Email` (string, required): The email address of the user.\n- `Phone` (string, required): The phone number of the user.\n- `UserType` (string, required): The type of user.\n    \n\n#### Response\n\n- `Name` (string): The name of the user.\n- `Email` (string): The email address of the user.\n- `Phone` (string): The phone number of the user.\n- `UserType` (string): The type of user.\n- `UserID` (integer): The unique identifier of the user.\n- `CreatedAt` (string): The date and time when the user was created.\n- `UpdatedAt` (string): The date and time when the user was last updated.\n    \n\n#### Example\n\n``` json\n{\n    \"Name\": \"\",\n    \"Email\": \"\",\n    \"Phone\": \"\",\n    \"UserType\": \"\",\n    \"UserID\": 0,\n    \"CreatedAt\": \"\",\n    \"UpdatedAt\": \"\"\n}\n\n ```"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Name\": \"<string>\",\n  \"Email\": \"<string>\",\n  \"Phone\": \"<string>\",\n  \"UserType\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/users/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"Name\": \"<string>\",\n  \"Email\": \"<string>\",\n  \"Phone\": \"<string>\",\n  \"UserType\": \"<string>\",\n  \"UserID\": \"<integer>\",\n  \"CreatedAt\": \"<dateTime>\",\n  \"UpdatedAt\": \"<dateTime>\"\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Name\": \"<string>\",\n  \"Email\": \"<string>\",\n  \"Phone\": \"<string>\",\n  \"UserType\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/users/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												""
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"name": "Create Driver User",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\n{\n  \"Name\": \"{{randomName}}\",\n  \"Email\": \"{{randomEmail}}\",\n  \"Phone\": \"{{randomPhone}}\",\n  \"UserType\": \"Driver\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://acf99c32-5a1d-4d3c-8ef6-947d2d08f8e6.mock.pstmn.io/api/v1/users/",
											"protocol": "https",
											"host": [
												"acf99c32-5a1d-4d3c-8ef6-947d2d08f8e6",
												"mock",
												"pstmn",
												"io"
											],
											"path": [
												"api",
												"v1",
												"users",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "date",
											"value": "Thu, 07 Mar 2024 11:36:50 GMT"
										},
										{
											"key": "server",
											"value": "uvicorn"
										},
										{
											"key": "content-length",
											"value": "186"
										},
										{
											"key": "content-type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"Name\": \"userRandom_kpduob\",\n    \"Email\": \"userrandom_kpduob@gmail.com\",\n    \"Phone\": \"407-772-47\",\n    \"UserType\": \"Driver\",\n    \"UserID\": 6,\n    \"CreatedAt\": \"2024-03-07T17:06:52\",\n    \"UpdatedAt\": \"2024-03-07T17:06:52\"\n}"
								}
							]
						},
						{
							"name": "Read Users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Each user object has expected properties\", function () {\r",
											"    responseBody.forEach(function(user) {\r",
											"        pm.expect(user).to.have.property('Name');\r",
											"        pm.expect(user).to.have.property('Email');\r",
											"        pm.expect(user).to.have.property('Phone');\r",
											"        pm.expect(user).to.have.property('UserType');\r",
											"        pm.expect(user).to.have.property('UserID');\r",
											"        pm.expect(user).to.have.property('CreatedAt');\r",
											"        pm.expect(user).to.have.property('UpdatedAt');\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Each user object has valid data\", function () {\r",
											"    responseBody.forEach(function(user) {\r",
											"        pm.expect(user.Name).to.be.a('string').and.not.empty;\r",
											"        pm.expect(user.Email).to.be.a('string').and.not.empty;\r",
											"        pm.expect(user.Phone).to.be.a('string').and.not.empty;\r",
											"        pm.expect(user.UserType).to.be.oneOf(['Driver', 'Rider']);\r",
											"        pm.expect(user.UserID).to.be.a('number').and.above(0);\r",
											"        pm.expect(user.CreatedAt).to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\r",
											"        pm.expect(user.UpdatedAt).to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/);\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/users/?skip=0&limit=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										""
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								},
								"description": "This endpoint makes an HTTP GET request to retrieve a list of users. The request includes query parameters \"skip\" to specify the number of items to skip and \"limit\" to specify the maximum number of items to return. The response will contain an array of user objects, each including the user's name, email, phone, user type, user ID, creation timestamp, and update timestamp."
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/users/?skip=0&limit=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												""
											],
											"query": [
												{
													"key": "skip",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "100"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"Name\": \"<string>\",\n    \"Email\": \"<string>\",\n    \"Phone\": \"<string>\",\n    \"UserType\": \"<string>\",\n    \"UserID\": \"<integer>\",\n    \"CreatedAt\": \"<dateTime>\",\n    \"UpdatedAt\": \"<dateTime>\"\n  },\n  {\n    \"Name\": \"<string>\",\n    \"Email\": \"<string>\",\n    \"Phone\": \"<string>\",\n    \"UserType\": \"<string>\",\n    \"UserID\": \"<integer>\",\n    \"CreatedAt\": \"<dateTime>\",\n    \"UpdatedAt\": \"<dateTime>\"\n  }\n]"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/users/?skip=0&limit=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												""
											],
											"query": [
												{
													"key": "skip",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "100"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Read Driver User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check if correct environment is used\", function () {\r",
											"    var expectedEnvironment = \"voltacabs\";\r",
											"    var currentEnvironment = pm.environment.name;\r",
											"    pm.expect(currentEnvironment).to.equal(expectedEnvironment);\r",
											"});\r",
											"\r",
											"pm.test(\"Response to be an object\", function () {\r",
											"     var responseBody = pm.response.json();\r",
											"     pm.expect(responseBody).to.be.an('object');\r",
											"     pm.expect(Object.keys(responseBody)).to.have.lengthOf(7);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type header is present and has expected value\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/users/{{driverID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"{{driverID}}"
									]
								},
								"description": "This endpoint retrieves information about a specific user identified by the driverID parameter. The HTTP GET request should be sent to {{baseUrl}}/api/v1/users/{{driverID}}.\n\n### Response\n\nThe response will include the following fields:\n\n- Name (string): The name of the user.\n- Email (string): The email address of the user.\n- Phone (string): The phone number of the user.\n- UserType (string): The type of user.\n- UserID (string): The unique identifier of the user.\n- CreatedAt (string): The timestamp indicating when the user was created.\n- UpdatedAt (string): The timestamp indicating when the user was last updated."
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/users/:user_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												":user_id"
											],
											"variable": [
												{
													"key": "user_id",
													"value": "<integer>",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"Name\": \"<string>\",\n  \"Email\": \"<string>\",\n  \"Phone\": \"<string>\",\n  \"UserType\": \"<string>\",\n  \"UserID\": \"<integer>\",\n  \"CreatedAt\": \"<dateTime>\",\n  \"UpdatedAt\": \"<dateTime>\"\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/users/:user_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												":user_id"
											],
											"variable": [
												{
													"key": "user_id",
													"value": "<integer>",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "rider users",
					"item": [
						{
							"name": "Create Rider User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generate Random Name\r",
											"function generateRandomName() {\r",
											"    var characters = 'abcdefghijklmnopqrstuvwxyz';\r",
											"    var firstname = 'user';\r",
											"    var lastname = 'Random_';\r",
											"    for (var i = 0; i < 6; i++) { \r",
											"        lastname += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return firstname + lastname;\r",
											"}\r",
											"\r",
											"//Generate Random Email\r",
											"function generateRandomEmail(randomName) {\r",
											"    var characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    var domain = 'gmail.com';\r",
											"    var randomString = '';\r",
											"    for (var i = 0; i < 5; i++) { \r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    var email = randomName.toLowerCase() +  '@' + domain;\r",
											"    return email;\r",
											"}\r",
											"\r",
											"\r",
											"// Generate random name\r",
											"var randomName = generateRandomName();\r",
											"pm.environment.set(\"randomName\", randomName);\r",
											"\r",
											"// Generate random email using the random name\r",
											"var randomEmail = generateRandomEmail(randomName);\r",
											"pm.environment.set(\"randomEmail\", randomEmail);\r",
											"\r",
											"//Generate Random Phone Number\r",
											"function generateRandomPhone() {\r",
											"  var phoneNumber = '';\r",
											"    for (var i = 0; i < 10; i++) {\r",
											"        if (i === 3 || i === 7) {\r",
											"            phoneNumber += '-';\r",
											"        } else {\r",
											"            phoneNumber += Math.floor(Math.random() * 10);\r",
											"        }\r",
											"    }\r",
											"    return phoneNumber;\r",
											"}\r",
											"\r",
											"var randomPhone = generateRandomPhone();\r",
											"pm.environment.set(\"randomPhone\", randomPhone);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody=pm.response.json()\r",
											"var UserID=responseBody.UserID\r",
											"pm.environment.set(\"riderID\",UserID)\r",
											"   \r",
											"var responseData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.Name).to.exist;\r",
											"    pm.expect(responseData.Email).to.exist;\r",
											"    pm.expect(responseData.Phone).to.exist;\r",
											"    pm.expect(responseData.UserType).to.exist;\r",
											"    pm.expect(responseData.UserID).to.exist;\r",
											"    pm.expect(responseData.CreatedAt).to.exist;\r",
											"    pm.expect(responseData.UpdatedAt).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Name is a non-empty string\", function () {\r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.Name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"{{randomName}}\",\n  \"Email\": \"{{randomEmail}}\",\n  \"Phone\": \"{{randomPhone}}\",\n  \"UserType\": \"Rider\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/users/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										""
									]
								},
								"description": "This endpoint makes an HTTP POST request to create a new user at {{baseUrl}}/api/v1/users/. The request should include the user's name, email, phone, and user type in the raw request body.\n\n### Request Body\n\n- `Name` (string): The name of the user.\n- `Email` (string): The email address of the user.\n- `Phone` (string): The phone number of the user.\n- `UserType` (string): The type of user.\n    \n\n### Response\n\nUpon successful creation, the response will include the user's details along with the `UserID`, `CreatedAt`, and `UpdatedAt` timestamps.\n\nExample Response:\n\n``` json\n{\n    \"Name\": \"\",\n    \"Email\": \"\",\n    \"Phone\": \"\",\n    \"UserType\": \"\",\n    \"UserID\": \"\",\n    \"CreatedAt\": \"\",\n    \"UpdatedAt\": \"\"\n}\n\n ```"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Name\": \"<string>\",\n  \"Email\": \"<string>\",\n  \"Phone\": \"<string>\",\n  \"UserType\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/users/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"Name\": \"<string>\",\n  \"Email\": \"<string>\",\n  \"Phone\": \"<string>\",\n  \"UserType\": \"<string>\",\n  \"UserID\": \"<integer>\",\n  \"CreatedAt\": \"<dateTime>\",\n  \"UpdatedAt\": \"<dateTime>\"\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Name\": \"<string>\",\n  \"Email\": \"<string>\",\n  \"Phone\": \"<string>\",\n  \"UserType\": \"<string>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/users/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												""
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Read Users",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/users/?skip=0&limit=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										""
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								},
								"description": "This endpoint makes an HTTP GET request to retrieve a list of users. The request includes query parameters \"skip\" and \"limit\" to specify the pagination. The \"skip\" parameter indicates the number of records to skip, while the \"limit\" parameter specifies the maximum number of records to return.\n\n### Request Parameters\n\n- `skip`: (number) Indicates the number of records to skip.\n- `limit`: (number) Specifies the maximum number of records to return.\n    \n\n### Response\n\nThe response will be a JSON array containing user objects. Each user object includes the following properties:\n\n- `Name`: (string) The name of the user.\n- `Email`: (string) The email address of the user.\n- `Phone`: (string) The phone number of the user.\n- `UserType`: (string) The type of user.\n- `UserID`: (string) The unique identifier of the user.\n- `CreatedAt`: (string) The timestamp indicating when the user was created.\n- `UpdatedAt`: (string) The timestamp indicating when the user was last updated."
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/users/?skip=0&limit=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												""
											],
											"query": [
												{
													"key": "skip",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "100"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"Name\": \"<string>\",\n    \"Email\": \"<string>\",\n    \"Phone\": \"<string>\",\n    \"UserType\": \"<string>\",\n    \"UserID\": \"<integer>\",\n    \"CreatedAt\": \"<dateTime>\",\n    \"UpdatedAt\": \"<dateTime>\"\n  },\n  {\n    \"Name\": \"<string>\",\n    \"Email\": \"<string>\",\n    \"Phone\": \"<string>\",\n    \"UserType\": \"<string>\",\n    \"UserID\": \"<integer>\",\n    \"CreatedAt\": \"<dateTime>\",\n    \"UpdatedAt\": \"<dateTime>\"\n  }\n]"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/users/?skip=0&limit=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												""
											],
											"query": [
												{
													"key": "skip",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "100"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Read Rider User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"  var responseData = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.Name).to.exist;\r",
											"  pm.expect(responseData.Email).to.exist;\r",
											"  pm.expect(responseData.Phone).to.exist;\r",
											"  pm.expect(responseData.UserType).to.exist;\r",
											"  pm.expect(responseData.UserID).to.exist;\r",
											"  pm.expect(responseData.CreatedAt).to.exist;\r",
											"  pm.expect(responseData.UpdatedAt).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"UserID is a non-negative integer\", function () {\r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.UserID).to.exist.and.to.be.a('number');\r",
											"  pm.expect(responseData.UserID).to.be.at.least(0);\r",
											"});\r",
											"\r",
											"pm.test(\"UserType is 'Rider'\", function () {\r",
											"    pm.expect(pm.response.json().UserType).to.eql(\"Rider\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/users/{{riderID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"{{riderID}}"
									]
								},
								"description": "This endpoint retrieves information about a specific user identified by the riderID in the URL. The response will include details such as the user's name, email, phone number, user type, user ID, creation timestamp, and last update timestamp."
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/users/:user_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												":user_id"
											],
											"variable": [
												{
													"key": "user_id",
													"value": "<integer>",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"Name\": \"<string>\",\n  \"Email\": \"<string>\",\n  \"Phone\": \"<string>\",\n  \"UserType\": \"<string>\",\n  \"UserID\": \"<integer>\",\n  \"CreatedAt\": \"<dateTime>\",\n  \"UpdatedAt\": \"<dateTime>\"\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/users/:user_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												":user_id"
											],
											"variable": [
												{
													"key": "user_id",
													"value": "<integer>",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "vehicles",
					"item": [
						{
							"name": "Create Vehicle For User",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string from an array of strings\r",
											"function getRandomElementFromArray(array) {\r",
											"    return array[Math.floor(Math.random() * array.length)];\r",
											"}\r",
											"\r",
											"var vehicleModels = [\"Tata Punch\", \"Maruti Suzuki\", \"Maruti Brezza\", \"Tata Nexon\", \"Hyundai Creta\", \"Hyundai Exter\", \"Bmw\", \"Mahindra Thar\", \"Mahindra\"];\r",
											"\r",
											"// Array of vehicle colors\r",
											"var vehicleColors = [\"Red\", \"Blue\", \"Green\", \"Yellow\", \"Black\", \"White\", \"Silver\", \"Gray\"];\r",
											"\r",
											"// Function to generate a random string\r",
											"function generateRandomString(length) {\r",
											"    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
											"    var randomString = '';\r",
											"    for (var i = 0; i < length; i++) {\r",
											"        randomString += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return randomString;\r",
											"}\r",
											"\r",
											"// Generate random data for the fields\r",
											"var make = \"Toyota\"; // Example: \"Toyota\"\r",
											"var model = getRandomElementFromArray(vehicleModels);\r",
											"var year = Math.floor(Math.random() * (2023 - 1900 + 1)) + 1900; // Random year between 1900 and 2023\r",
											"var color = getRandomElementFromArray(vehicleColors);\r",
											"var licensePlate = generateRandomString(7); // Example: \"ABC1234\"\r",
											"\r",
											"// Set the generated data as environment variables\r",
											"pm.environment.set(\"make\", make);\r",
											"pm.environment.set(\"model\", model);\r",
											"pm.environment.set(\"year\", year);\r",
											"pm.environment.set(\"color\", color);\r",
											"pm.environment.set(\"license_plate\", licensePlate);\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();\r",
											"   var id = responseBody.id; \r",
											"   pm.environment.set(\"vehicleID\", id);\r",
											"\r",
											"\r",
											"var responseData = pm.response.json();\r",
											"pm.test(\"Response contains all required fields\", function () { \r",
											"    pm.expect(responseData).to.have.keys('make', 'model', 'year', 'color', 'license_plate', 'driver_id', 'id');\r",
											"});\r",
											"\r",
											"pm.test(\"Data types are correct\", function () {\r",
											"    pm.expect(responseData.make).to.be.a('string');\r",
											"    pm.expect(responseData.model).to.be.a('string');\r",
											"    pm.expect(responseData.year).to.be.a('number');\r",
											"    pm.expect(responseData.color).to.be.a('string');\r",
											"    pm.expect(responseData.license_plate).to.be.a('string');\r",
											"    pm.expect(responseData.driver_id).to.be.a('number');\r",
											"    pm.expect(responseData.id).to.be.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\"Driver with provided ID exists\", function () {\r",
											"    const driverId = pm.response.json().driver_id;\r",
											"    pm.expect(driverId).to.be.a('number');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"make\": \"{{make}}\",\n  \"model\": \"{{model}}\",\n  \"year\": {{year}},\n  \"color\": \"{{color}}\",\n  \"license_plate\": \"{{license_plate}}\",\n   \"driver_id\": \"{{driverID}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/vehicles/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"vehicles",
										""
									]
								},
								"description": "# Add Vehicle\n\nThis endpoint allows you to add a new vehicle to the system.\n\n## Request Body\n\n- make (string): The make of the vehicle.\n- model (string): The model of the vehicle.\n- year (integer): The year of the vehicle.\n- color (string): The color of the vehicle.\n- license_plate (string): The license plate of the vehicle.\n- driver_id (string): The ID of the driver associated with the vehicle.\n    \n\n## Response\n\n- make (string): The make of the vehicle.\n- model (string): The model of the vehicle.\n- year (integer): The year of the vehicle.\n- color (string): The color of the vehicle.\n- license_plate (string): The license plate of the vehicle.\n- driver_id (string): The ID of the driver associated with the vehicle.\n- id (string): The unique ID of the newly added vehicle."
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"make\": \"<string>\",\n  \"model\": \"<string>\",\n  \"year\": \"<integer>\",\n  \"color\": \"<string>\",\n  \"license_plate\": \"<string>\",\n  \"driver_id\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/vehicles/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"vehicles",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"make\": \"<string>\",\n  \"model\": \"<string>\",\n  \"year\": \"<integer>\",\n  \"color\": \"<string>\",\n  \"license_plate\": \"<string>\",\n  \"driver_id\": \"<integer>\",\n  \"id\": \"<integer>\"\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"make\": \"<string>\",\n  \"model\": \"<string>\",\n  \"year\": \"<integer>\",\n  \"color\": \"<string>\",\n  \"license_plate\": \"<string>\",\n  \"driver_id\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/vehicles/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"vehicles",
												""
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Read Vehicle",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response is a JSON object\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											" var responseData = pm.response.json();\r",
											"\r",
											"pm.test(\"Required fields are present\", function () {\r",
											"    pm.expect(responseData).to.have.property('make');\r",
											"    pm.expect(responseData).to.have.property('model');\r",
											"    pm.expect(responseData).to.have.property('year');\r",
											"    pm.expect(responseData).to.have.property('color');\r",
											"    pm.expect(responseData).to.have.property('license_plate');\r",
											"    pm.expect(responseData).to.have.property('driver_id');\r",
											"    pm.expect(responseData).to.have.property('id');\r",
											"});\r",
											"\r",
											"pm.test(\"Data types are as expected\", function () {\r",
											"    pm.expect(responseData.make).to.be.a('string');\r",
											"    pm.expect(responseData.model).to.be.a('string');\r",
											"    pm.expect(responseData.year).to.be.a('number');\r",
											"    pm.expect(responseData.color).to.be.a('string');\r",
											"    pm.expect(responseData.license_plate).to.be.a('string');\r",
											"    pm.expect(responseData.driver_id).to.be.a('number');\r",
											"    pm.expect(responseData.id).to.be.a('number');\r",
											"});\r",
											"\r",
											"pm.test(\"Year value is valid\", function () {\r",
											"    const year = pm.response.json().year;\r",
											"    pm.expect(year).to.be.above(1900);\r",
											"});\r",
											"\r",
											"pm.test(\"Driver ID is non-negative\", function () {\r",
											"    const driverId = pm.response.json().driver_id;\r",
											"    pm.expect(driverId).to.be.above(0);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/vehicles/{{vehicleID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"vehicles",
										"{{vehicleID}}"
									]
								},
								"description": "This endpoint retrieves information about a specific vehicle identified by the vehicleID parameter. The response will include details such as the make, model, year, color, license plate, driver ID, and the vehicle's ID. The response will be in JSON format with the status code 200.\n\nExample response:\n\n``` json\n{\n    \"make\": \"\",\n    \"model\": \"\",\n    \"year\": 0,\n    \"color\": \"\",\n    \"license_plate\": \"\",\n    \"driver_id\": 0,\n    \"id\": 0\n}\n\n ```"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/vehicles/:vehicle_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"vehicles",
												":vehicle_id"
											],
											"variable": [
												{
													"key": "vehicle_id",
													"value": "<integer>",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"make\": \"<string>\",\n  \"model\": \"<string>\",\n  \"year\": \"<integer>\",\n  \"color\": \"<string>\",\n  \"license_plate\": \"<string>\",\n  \"driver_id\": \"<integer>\",\n  \"id\": \"<integer>\"\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/vehicles/:vehicle_id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"vehicles",
												":vehicle_id"
											],
											"variable": [
												{
													"key": "vehicle_id",
													"value": "<integer>",
													"description": "(Required) "
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								},
								{
									"name": "Read Vehicle",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/vehicles/{{vehicleID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"vehicles",
												"{{vehicleID}}"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "date",
											"value": "Wed, 13 Mar 2024 15:22:57 GMT"
										},
										{
											"key": "server",
											"value": "uvicorn"
										},
										{
											"key": "content-length",
											"value": "116"
										},
										{
											"key": "content-type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n    \"make\": \"Toyota\",\n    \"model\": \"Mahindra Thar\",\n    \"year\": 2012,\n    \"color\": \"Red\",\n    \"license_plate\": \"OGKBgFY\",\n    \"driver_id\": 75,\n    \"id\": 38\n}\n\n"
								}
							]
						}
					]
				},
				{
					"name": "trips",
					"item": [
						{
							"name": "Create Trip With Locations",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random status\r",
											"function generateRandomStatus() {\r",
											"    var statuses = [\"Requested\", \"In Progress\", \"Completed\",\"Cancelled\"];\r",
											"    return statuses[Math.floor(Math.random() * statuses.length)];\r",
											"}\r",
											"\r",
											"// Generate a random status\r",
											"var status = generateRandomStatus();\r",
											"pm.environment.set(\"status\", status);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();\r",
											"var TripID= responseBody.TripID\r",
											"pm.environment.set(\"TripID\",TripID)\r",
											"\r",
											"pm.test(\"Response is a JSON object\", function () {\r",
											"    pm.expect(pm.response.json()).to.be.an('object');\r",
											"});\r",
											"\r",
											"var responseData = pm.response.json();\r",
											"pm.test(\"Required fields are present\", function () { \r",
											"    pm.expect(responseData).to.have.property('RiderID');\r",
											"    pm.expect(responseData).to.have.property('DriverID');\r",
											"    pm.expect(responseData).to.have.property('VehicleID');\r",
											"    pm.expect(responseData).to.have.property('StartTime');\r",
											"    pm.expect(responseData).to.have.property('EndTime');\r",
											"    pm.expect(responseData).to.have.property('Status');\r",
											"    pm.expect(responseData).to.have.property('TripID');\r",
											"    pm.expect(responseData).to.have.property('CreatedAt');\r",
											"    pm.expect(responseData).to.have.property('UpdatedAt');\r",
											"    pm.expect(responseData).to.have.property('locations');\r",
											"});\r",
											"\r",
											"pm.test(\"StartTime is before EndTime\", function () {\r",
											"    const startTime = new Date(pm.response.json().StartTime);\r",
											"    const endTime = new Date(pm.response.json().EndTime);\r",
											"    pm.expect(startTime).to.be.below(endTime);\r",
											"});\r",
											"\r",
											"pm.test(\"Status is valid\", function () {\r",
											"    const validStatuses = [\"Completed\", \"InProgress\", \"Cancelled\",\"Rejected\"];\r",
											"    const status = pm.response.json().Status;\r",
											"    pm.expect(validStatuses).to.include(status);\r",
											"});\r",
											"\r",
											"pm.test(\"IDs are positive numbers\", function () {\r",
											"    pm.expect(responseData.RiderID).to.be.above(0);\r",
											"    pm.expect(responseData.DriverID).to.be.above(0);\r",
											"    pm.expect(responseData.VehicleID).to.be.above(0);\r",
											"    pm.expect(responseData.TripID).to.be.above(0);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Status\": \"Completed\",\n    \"RiderID\": \"{{riderID}}\",\n    \"DriverID\": \"{{driverID}}\",\n    \"VehicleID\": \"{{vehicleID}}\",\n    \"StartTime\": \"2024-03-13T15:30:00Z\",\n    \"EndTime\": \"2024-03-13T15:50:00Z\",\n    \"locations\": [\n    {\n        \"Latitude\":  -16.661930,\n        \"Longitude\":-49.271900\n    }\n]\n    \n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/trips/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"trips",
										""
									]
								},
								"description": "### Add New Trip\n\nThis endpoint allows you to add a new trip by making an HTTP POST request to the specified URL.\n\n#### Request Body\n\n- `Status` (string): The status of the trip.\n- `RiderID` (string): The ID of the rider for the trip.\n- `DriverID` (string): The ID of the driver for the trip.\n- `VehicleID` (string): The ID of the vehicle used for the trip.\n- `StartTime` (string): The start time of the trip.\n- `EndTime` (string): The end time of the trip.\n- `locations` (array): An array of objects containing latitude and longitude for the trip locations.\n    \n\n#### Response\n\nUpon successful execution, the endpoint returns a JSON object with the following fields:\n\n- `RiderID` (number): The ID of the rider for the trip.\n- `DriverID` (number): The ID of the driver for the trip.\n- `VehicleID` (number): The ID of the vehicle used for the trip.\n- `StartTime` (string): The start time of the trip.\n- `EndTime` (string): The end time of the trip.\n- `Status` (string): The status of the trip.\n- `TripID` (number): The ID of the newly created trip.\n- `CreatedAt` (string): The timestamp of when the trip was created.\n- `UpdatedAt` (string): The timestamp of when the trip was last updated.\n- `locations` (array): An array of objects containing trip locations.\n    \n\n#### Example Response\n\n``` json\n{\n    \"Status\": \"\",\n    \"TripID\": \"\",\n    \"RiderID\": \"\",\n    \"DriverID\": \"\",\n    \"VehicleID\": \"\",\n    \"StartTime\": \"\",\n    \"EndTime\": \"\",\n    \"CreatedAt\": \"\",\n    \"UpdatedAt\": \"\"\n}\n\n ```"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Status\": \"<string>\",\n  \"RiderID\": \"<integer>\",\n  \"DriverID\": \"<integer>\",\n  \"VehicleID\": \"<integer>\",\n  \"StartTime\": \"<dateTime>\",\n  \"EndTime\": \"<dateTime>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/trips/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"trips",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"Status\": \"<string>\",\n  \"TripID\": \"<integer>\",\n  \"RiderID\": \"<integer>\",\n  \"DriverID\": \"<integer>\",\n  \"VehicleID\": \"<integer>\",\n  \"StartTime\": \"<dateTime>\",\n  \"EndTime\": \"<dateTime>\",\n  \"CreatedAt\": \"<dateTime>\",\n  \"UpdatedAt\": \"<dateTime>\"\n}"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Status\": \"<string>\",\n  \"RiderID\": \"<integer>\",\n  \"DriverID\": \"<integer>\",\n  \"VehicleID\": \"<integer>\",\n  \"StartTime\": \"<dateTime>\",\n  \"EndTime\": \"<dateTime>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/trips/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"trips",
												""
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Read Trips",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseBody = pm.response.json();\r",
											"\r",
											"pm.test(\"Response has the expected structure\", function () {\r",
											"    responseBody.forEach(function(trip) {\r",
											"        pm.expect(trip).to.have.property('RiderID');\r",
											"        pm.expect(trip).to.have.property('DriverID');\r",
											"        pm.expect(trip).to.have.property('VehicleID');\r",
											"        pm.expect(trip).to.have.property('StartTime');\r",
											"        pm.expect(trip).to.have.property('EndTime');\r",
											"        pm.expect(trip).to.have.property('Status');\r",
											"        pm.expect(trip).to.have.property('TripID');\r",
											"        pm.expect(trip).to.have.property('CreatedAt');\r",
											"        pm.expect(trip).to.have.property('UpdatedAt');\r",
											"\r",
											"        pm.expect(trip).to.have.property('locations');\r",
											"        trip.locations.forEach(function(location) {\r",
											"            pm.expect(location).to.have.property('TripID');\r",
											"            pm.expect(location).to.have.property('Latitude');\r",
											"            pm.expect(location).to.have.property('Longitude');\r",
											"            pm.expect(location).to.have.property('RecordedAt');\r",
											"            pm.expect(location).to.have.property('TripLocationID');\r",
											"        });\r",
											"    });\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/trips/?skip=0&limit=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"trips",
										""
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "100"
										}
									]
								},
								"description": "This endpoint retrieves a list of trips with optional pagination parameters for skipping and limiting the results.\n\nThe response will be a JSON array containing trip objects, each with details such as RiderID, DriverID, VehicleID, StartTime, EndTime, Status, CreatedAt, UpdatedAt, and an array of locations with details like Latitude, Longitude, RecordedAt, and TripLocationID.\n\nExample Response:\n\n``` json\n[\n    {\n        \"Status\": \"\",\n        \"TripID\": \"\",\n        \"RiderID\": \"\",\n        \"DriverID\": \"\",\n        \"VehicleID\": \"\",\n        \"StartTime\": \"\",\n        \"EndTime\": \"\",\n        \"CreatedAt\": \"\",\n        \"UpdatedAt\": \"\"\n    }\n]\n\n ```"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/trips/?skip=0&limit=100",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"trips",
												""
											],
											"query": [
												{
													"key": "skip",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "100"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"Status\": \"<string>\",\n    \"TripID\": \"<integer>\",\n    \"RiderID\": \"<integer>\",\n    \"DriverID\": \"<integer>\",\n    \"VehicleID\": \"<integer>\",\n    \"StartTime\": \"<dateTime>\",\n    \"EndTime\": \"<dateTime>\",\n    \"CreatedAt\": \"<dateTime>\",\n    \"UpdatedAt\": \"<dateTime>\"\n  },\n  {\n    \"Status\": \"<string>\",\n    \"TripID\": \"<integer>\",\n    \"RiderID\": \"<integer>\",\n    \"DriverID\": \"<integer>\",\n    \"VehicleID\": \"<integer>\",\n    \"StartTime\": \"<dateTime>\",\n    \"EndTime\": \"<dateTime>\",\n    \"CreatedAt\": \"<dateTime>\",\n    \"UpdatedAt\": \"<dateTime>\"\n  }\n]"
								},
								{
									"name": "Validation Error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/v1/trips/?skip=0&limit=100",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"trips",
												""
											],
											"query": [
												{
													"key": "skip",
													"value": "0"
												},
												{
													"key": "limit",
													"value": "100"
												}
											]
										}
									},
									"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
									"code": 422,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"detail\": [\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    },\n    {\n      \"loc\": [\n        \"<string>\",\n        \"<string>\"\n      ],\n      \"msg\": \"<string>\",\n      \"type\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "Hotspot",
					"item": [
						{
							"name": "Get demand hotspot data.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Response data has the expected structure', function () {\r",
											"    if (Array.isArray(jsonData) && jsonData.length === 0) {\r",
											"        pm.expect.fail(\"Response array is empty\");\r",
											"    } else {\r",
											"        jsonData.forEach(function (item) {\r",
											"            pm.expect(item).to.have.property('Latitude');\r",
											"            pm.expect(item).to.have.property('Longitude');\r",
											"            pm.expect(item).to.have.property('trip_count');\r",
											"        });\r",
											"    }\r",
											"});\r",
											"\r",
											"pm.test('Latitude and Longitude values are within valid range and numeric', function () {\r",
											"    if (Array.isArray(jsonData) && jsonData.length === 0) {\r",
											"        pm.expect.fail(\"Response array is empty\");\r",
											"    } else {\r",
											"        jsonData.forEach(function (item) {\r",
											"            pm.expect(item.Latitude).to.be.a('number');\r",
											"            pm.expect(item.Longitude).to.be.a('number');\r",
											"            pm.expect(item.Latitude).to.be.within(-90, 90);\r",
											"            pm.expect(item.Longitude).to.be.within(-180, 180);\r",
											"        });\r",
											"    }\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Trip count values should be at least 1 and not zero\", function () {\r",
											"    jsonData.forEach(function(item) {\r",
											"        pm.expect(item.trip_count).to.be.a('number');\r",
											"        pm.expect(item.trip_count).to.be.above(0);\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/hotspots",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"hotspots"
									],
									"query": [
										{
											"key": "trip_count",
											"value": "1",
											"disabled": true
										}
									]
								},
								"description": "This endpoint retrieves a list of hotspots via an HTTP GET request to {{baseUrl}}/api/v1/hotspots. The response will contain an array of hotspot objects, each including the latitude, longitude, and trip count.\n\nExample response:\n\n``` json\n[\n    {\n        \"Latitude\": 0,\n        \"Longitude\": 0,\n        \"trip_count\": 0\n    }\n]\n\n ```"
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/hotspots",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"hotspots"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Endpoint Availability\", function () {",
					"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]); ",
					"});",
					"",
					"",
					"pm.test(\"Response status is not client error or server error\", function () {",
					" pm.expect(pm.response.code).to.not.be.oneOf([400, 401, 403, 404,500]); ",
					"});",
					"",
					"",
					"pm.test(\"Response body has data with at least one request\", function () {",
					"    var responseBody = pm.response.json();",
					"    pm.expect(responseBody).to.not.be.empty;",
					"});",
					"",
					"pm.test('response must be valid and have a body', function () {",
					"    pm.response.to.be.ok;",
					"    pm.response.to.be.withBody;",
					"    pm.response.to.be.json;",
					"})"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "/",
			"type": "string"
		}
	]
}